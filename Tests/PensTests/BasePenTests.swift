import XCTest
import CoreGraphics

@testable import Pens

class BaseTestPen: BasePen, CustomStringConvertible {
    // Test class that prints PostScript to stdout
    private var commands = [String]()

    override func _moveTo(pt: CGPoint) {
        commands.append("\(pt.x) \(pt.y) moveto")
    }
    override func _lineTo(pt: CGPoint) {
        commands.append("\(pt.x) \(pt.y) lineto")
    }
    override func _curveToOne(pt1: CGPoint, pt2: CGPoint, pt3: CGPoint) {
        commands.append("\(pt1.x) \(pt1.y) \(pt2.x) \(pt2.y) \(pt3.x) \(pt3.y) curveto")
    }
    override func _closePath() {
        commands.append("closepath")
    }
    override func _endPath() {
        commands.append("endpath")
    }
    var description: String {
        return commands.joined(separator: " ")
    }
}

extension XCTestCase {
    // from https://www.swiftbysundell.com/articles/testing-error-code-paths-in-swift/
    func assert<T, E: Error & Equatable>(
        _ expression: @autoclosure () throws -> T,
        throws error: E,
        in file: StaticString = #file,
        line: UInt = #line
    ) {
        var thrownError: Error?

        XCTAssertThrowsError(try expression(),
                             file: file, line: line) {
            thrownError = $0
        }

        XCTAssertTrue(
            thrownError is E,
            "Unexpected error type: \(type(of: thrownError))",
            file: file, line: line
        )

        XCTAssertEqual(
            thrownError as? E, error,
            file: file, line: line
        )
    }
}

final class BasePenTests: XCTestCase {
    
    func test_moveTo() {
        let pen = BaseTestPen()
        pen.moveTo(pt: CGPoint(x: 0.5, y: -4.3))
        XCTAssertEqual("0.5 -4.3 moveto", pen.description)
        XCTAssertEqual(CGPoint(x: 0.5, y: -4.3), pen._getCurrentPoint())
    }
    
    func test_lineTo() {
        let pen = BaseTestPen()
        pen.moveTo(pt: CGPoint(x: 4, y: 5))
        pen.lineTo(pt: CGPoint(x: 7, y: 8))
        XCTAssertEqual("4.0 5.0 moveto 7.0 8.0 lineto", pen.description)
        XCTAssertEqual(CGPoint(x: 7, y: 8), pen._getCurrentPoint())
    }
    
        func test_curveTo_zeroPoints() {
            let pen = BaseTestPen()
            pen.moveTo(pt: CGPoint(x: 0.0, y: 0.0))
            assert(try pen.curveTo(points: []),
                   throws: BaseTestPen.Error.noPoints)
        }
    
    func test_curveTo_onePoint() {
        let pen = BaseTestPen()
        pen.moveTo(pt: CGPoint(x: 0.0, y: 0.0))
        
        do {
            try pen.curveTo(points: [CGPoint(x: 1.0, y: 1.1)])
        } catch {
            print(error)
        }
        XCTAssertEqual("0.0 0.0 moveto 1.0 1.1 lineto", pen.description)
        XCTAssertEqual(CGPoint(x: 1.0, y: 1.1), pen._getCurrentPoint())
    }
    
    func test_curveTo_twoPoints() {
        let pen = BaseTestPen()
        pen.moveTo(pt: CGPoint(x: 0.0, y: 0.0))
        
        do {
            try pen.curveTo(points: [CGPoint(x: 6.0, y: 3.0), CGPoint(x: 3.0, y: 6.0)])
        } catch {
            print(error)
        }
        XCTAssertEqual("0.0 0.0 moveto 4.0 2.0 5.0 4.0 3.0 6.0 curveto", pen.description)
        XCTAssertEqual(CGPoint(x: 3.0, y: 6.0), pen._getCurrentPoint())
    }
    
    func test_curveTo_manyPoints() {
        let pen = BaseTestPen()
        pen.moveTo(pt: CGPoint(x: 0.0, y: 0.0))
        
        do {
            try pen.curveTo(points: [CGPoint(x: 1.0, y: 1.1),
                                     CGPoint(x: 2.0, y: 2.1),
                                     CGPoint(x: 3.0, y: 3.1),
                                     CGPoint(x: 4.0, y: 4.1)])
        } catch {
            print(error)
        }
        let expectedCommands = [
            "0.0 0.0 moveto",
            "1.0 1.1 1.5 1.6 2.0 2.1 curveto",
            "2.5 2.6 3.0 3.1 4.0 4.1 curveto"
        ]
        XCTAssertEqual(expectedCommands.joined(separator: " "), pen.description)
        XCTAssertEqual(CGPoint(x: 4.0, y: 4.1), pen._getCurrentPoint())
    }
    
        func test_qCurveTo_zeroPoints() {
            let pen = BaseTestPen()
            pen.moveTo(pt: CGPoint(x: 0.0, y: 0.0))
            assert(try pen.qCurveTo(points: []),
                   throws: BaseTestPen.Error.noPoints)
        }
    
    func test_qCurveTo_onePoint() {
        let pen = BaseTestPen()
        pen.moveTo(pt: CGPoint(x: 0.0, y: 0.0))
        do {
            try pen.qCurveTo(points: [CGPoint(x: 77.7, y: 99.9)])
        } catch {
            print(error)
        }
        XCTAssertEqual("0.0 0.0 moveto 77.7 99.9 lineto", pen.description)
        XCTAssertEqual(CGPoint(x: 77.7, y: 99.9), pen._getCurrentPoint())
    }
    
    func test_qCurveTo_manyPoints() {
        let pen = BaseTestPen()
        pen.moveTo(pt: CGPoint(x: 0.0, y: 0.0))
        do {
            try pen.qCurveTo(points: [CGPoint(x: 6.0, y: 3.0), CGPoint(x: 3.0, y: 6.0)])
        } catch {
            print(error)
        }
        XCTAssertEqual("0.0 0.0 moveto 4.0 2.0 5.0 4.0 3.0 6.0 curveto",
                       pen.description)
        XCTAssertEqual(CGPoint(x: 3.0, y: 6.0), pen._getCurrentPoint())
    }
    
    func test_qCurveTo_onlyOffCurvePoints() {
        let pen = BaseTestPen()
        pen.moveTo(pt: CGPoint(x: 0.0, y: 0.0))
        
        do {
            try pen.qCurveTo(points: [CGPoint(x: 6.0, y: -6.0),
                                      CGPoint(x: 12.0, y: 12.0),
                                      CGPoint(x: 18.0, y: -18.0),
                                      nil])
        } catch {
            print(error)
        }
        let expectedResults = [
            "0.0 0.0 moveto",
            "12.0 -12.0 moveto",
            "8.0 -8.0 7.0 -3.0 9.0 3.0 curveto",
            "11.0 9.0 13.0 7.0 15.0 -3.0 curveto",
            "17.0 -13.0 16.0 -16.0 12.0 -12.0 curveto"
        ]
        XCTAssertEqual(expectedResults.joined(separator: " "), pen.description)
        XCTAssertEqual(CGPoint(x: 12.0, y: -12.0), pen._getCurrentPoint())
    }
    
    func test_closePath() {
        let pen = BaseTestPen()
        pen.lineTo(pt: CGPoint(x: 3, y: 4))
        pen.closePath()
        XCTAssertEqual("3.0 4.0 lineto closepath", pen.description)
        XCTAssertEqual(nil, pen._getCurrentPoint())
    }
    
    func test_endPath() {
        let pen = BaseTestPen()
        pen.lineTo(pt: CGPoint(x: 3, y: 4))
        pen.endPath()
        XCTAssertEqual("3.0 4.0 lineto endpath", pen.description)
        XCTAssertEqual(nil, pen._getCurrentPoint())
    }
    
    func test_addComponent(){
        let pen = BaseTestPen()
        pen.glyphSet["oslash"] = Glyph()

        do {
            try pen.addComponent(glyphName: "oslash",
                                 transformation: CGAffineTransform(a: 2, b: 3, c: 0.5, d: 2, tx: -10, ty: 0))
        } catch {
            print("\(error)")
        }
        let expectedResults = ["-10.0 0.0 moveto",
                               "40.0 200.0 lineto",
                               "127.5 300.0 131.25 290.0 125.0 265.0 curveto",
                               "118.75 240.0 102.5 200.0 -10.0 0.0 curveto",
                               "closepath"]
        XCTAssertEqual(expectedResults.joined(separator: " "), pen.description)
        XCTAssertEqual(nil, pen._getCurrentPoint())
    }

}
