import XCTest
import CoreGraphics

@testable import Pens

func draw1(pen: AreaPen) {
    pen.moveTo(pt: CGPoint(x: 254, y: 360))
    pen.lineTo(pt: CGPoint(x: 771, y: 367))
    do {
        try pen.curveTo(points: [CGPoint(x: 800, y: 393), CGPoint(x: 808, y: 399), CGPoint(x: 819, y: 412)])
        try pen.curveTo(points: [CGPoint(x: 818, y: 388), CGPoint(x: 774, y: 138), CGPoint(x: 489, y: 145)])
        try pen.curveTo(points: [CGPoint(x: 188, y: 145), CGPoint(x: 200, y: 398), CGPoint(x: 200, y: 421)])
        try pen.curveTo(points: [CGPoint(x: 209, y: 409), CGPoint(x: 220, y: 394), CGPoint(x: 254, y: 360)])
    } catch {
        print("\(error)")
    }
    pen.closePath()
}

func draw2(pen: AreaPen) {
    pen.moveTo(pt: CGPoint(x: 254, y: 360) )
    do {
        try pen.curveTo(points: [CGPoint(x: 220, y: 394), CGPoint(x: 209, y: 409), CGPoint(x: 200, y: 421)])
        try pen.curveTo(points: [CGPoint(x: 200, y: 398), CGPoint(x: 188, y: 145), CGPoint(x: 489, y: 145)])
        try pen.curveTo(points: [CGPoint(x: 774, y: 138), CGPoint(x: 818, y: 388), CGPoint(x: 819, y: 412)])
        try pen.curveTo(points: [CGPoint(x: 808, y: 399), CGPoint(x: 800, y: 393), CGPoint(x: 771, y: 367)])
    } catch {
        print("\(error)")
    }
    pen.closePath()
}

func draw3(pen: AreaPen) {
    pen.moveTo( pt: CGPoint(x: 771, y: 367) )
    do {
        try pen.curveTo(points: [CGPoint(x: 800, y: 393), CGPoint(x: 808, y: 399), CGPoint(x: 819, y: 412)])
        try pen.curveTo(points: [CGPoint(x: 818, y: 388), CGPoint(x: 774, y: 138), CGPoint(x: 489, y: 145)])
        try pen.curveTo(points: [CGPoint(x: 188, y: 145), CGPoint(x: 200, y: 398), CGPoint(x: 200, y: 421)])
        try pen.curveTo(points: [CGPoint(x: 209, y: 409), CGPoint(x: 220, y: 394), CGPoint(x: 254, y: 360)])
    } catch {
        print("\(error)")
    }
    pen.closePath()
}

func draw4(pen: AreaPen) {
    pen.moveTo( pt: CGPoint(x: 771, y: 367) )
    pen.lineTo( pt: CGPoint(x: 254, y: 360) )
    do {
        try pen.curveTo(points: [CGPoint(x: 220, y: 394), CGPoint(x: 209, y: 409), CGPoint(x: 200, y: 421)])
        try pen.curveTo(points: [CGPoint(x: 200, y: 398), CGPoint(x: 188, y: 145), CGPoint(x: 489, y: 145)])
        try pen.curveTo(points: [CGPoint(x: 774, y: 138), CGPoint(x: 818, y: 388), CGPoint(x: 819, y: 412)])
        try pen.curveTo(points: [CGPoint(x: 808, y: 399), CGPoint(x: 800, y: 393), CGPoint(x: 771, y: 367)])
    } catch {
        print("\(error)")
    }
    pen.closePath()
}

func draw5(pen: AreaPen) {
    pen.moveTo( pt: CGPoint(x: 254, y: 360) )
    pen.lineTo( pt: CGPoint(x: 771, y: 367) )
    do {
        try pen.qCurveTo(points: [CGPoint(x: 793, y: 386), CGPoint(x: 802, y: 394)])
        try pen.qCurveTo(points: [CGPoint(x: 811, y: 402), CGPoint(x: 819, y: 412)])
        try pen.qCurveTo(points: [CGPoint(x: 819, y: 406), CGPoint(x: 814, y: 383.5)])
        try pen.qCurveTo(points: [CGPoint(x: 809, y: 361), CGPoint(x: 796, y: 330.5)])
        try pen.qCurveTo(points: [CGPoint(x: 783, y: 300), CGPoint(x: 760.5, y: 266.5)])
        try pen.qCurveTo(points: [CGPoint(x: 738, y: 233), CGPoint(x: 701, y: 205.5)])
        try pen.qCurveTo(points: [CGPoint(x: 664, y: 178), CGPoint(x: 612, y: 160.5)])
        try pen.qCurveTo(points: [CGPoint(x: 560, y: 143), CGPoint(x: 489, y: 145)])
        try pen.qCurveTo(points: [CGPoint(x: 414, y: 145), CGPoint(x: 363, y: 164)])
        try pen.qCurveTo(points: [CGPoint(x: 312, y: 183), CGPoint(x: 280, y: 211.5)])
        try pen.qCurveTo(points: [CGPoint(x: 248, y: 240), CGPoint(x: 231.5, y: 274.5)])
        try pen.qCurveTo(points: [CGPoint(x: 215, y: 309), CGPoint(x: 208, y: 339.5)])
        try pen.qCurveTo(points: [CGPoint(x: 201, y: 370), CGPoint(x: 200.5, y: 392.5)])
        try pen.qCurveTo(points: [CGPoint(x: 200, y: 415), CGPoint(x: 200, y: 421)])
        try pen.qCurveTo(points: [CGPoint(x: 207, y: 412), CGPoint(x: 217.5, y: 399)])
        try pen.qCurveTo(points: [CGPoint(x: 228, y: 386), CGPoint(x: 254, y: 360)])
    } catch {
        print("\(error)")
    }
    pen.closePath()
}

func draw6(pen: AreaPen) {
    pen.moveTo( pt: CGPoint(x: 254, y: 360) )
    do {
        try pen.qCurveTo(points: [CGPoint(x: 228, y: 386), CGPoint(x: 217.5, y: 399)])
        try pen.qCurveTo(points: [CGPoint(x: 207, y: 412), CGPoint(x: 200, y: 421)])
        try pen.qCurveTo(points: [CGPoint(x: 200, y: 415), CGPoint(x: 200.5, y: 392.5)])
        try pen.qCurveTo(points: [CGPoint(x: 201, y: 370), CGPoint(x: 208, y: 339.5)])
        try pen.qCurveTo(points: [CGPoint(x: 215, y: 309), CGPoint(x: 231.5, y: 274.5)])
        try pen.qCurveTo(points: [CGPoint(x: 248, y: 240), CGPoint(x: 280, y: 211.5)])
        try pen.qCurveTo(points: [CGPoint(x: 312, y: 183), CGPoint(x: 363, y: 164)])
        try pen.qCurveTo(points: [CGPoint(x: 414, y: 145), CGPoint(x: 489, y: 145)])
        try pen.qCurveTo(points: [CGPoint(x: 560, y: 143), CGPoint(x: 612, y: 160.5)])
        try pen.qCurveTo(points: [CGPoint(x: 664, y: 178), CGPoint(x: 701, y: 205.5)])
        try pen.qCurveTo(points: [CGPoint(x: 738, y: 233), CGPoint(x: 760.5, y: 266.5)])
        try pen.qCurveTo(points: [CGPoint(x: 783, y: 300), CGPoint(x: 796, y: 330.5)])
        try pen.qCurveTo(points: [CGPoint(x: 809, y: 361), CGPoint(x: 814, y: 383.5)])
        try pen.qCurveTo(points: [CGPoint(x: 819, y: 406), CGPoint(x: 819, y: 412)])
        try pen.qCurveTo(points: [CGPoint(x: 811, y: 402), CGPoint(x: 802, y: 394)])
        try pen.qCurveTo(points: [CGPoint(x: 793, y: 386), CGPoint(x: 771, y: 367)])
    } catch {
        print("\(error)")
    }
    pen.closePath()
}

func draw7(pen: AreaPen) {
    pen.moveTo( pt: CGPoint(x: 771, y: 367) )
    do {
        try pen.qCurveTo(points: [CGPoint(x: 793, y: 386), CGPoint(x: 802, y: 394)])
        try pen.qCurveTo(points: [CGPoint(x: 811, y: 402), CGPoint(x: 819, y: 412)])
        try pen.qCurveTo(points: [CGPoint(x: 819, y: 406), CGPoint(x: 814, y: 383.5)])
        try pen.qCurveTo(points: [CGPoint(x: 809, y: 361), CGPoint(x: 796, y: 330.5)])
        try pen.qCurveTo(points: [CGPoint(x: 783, y: 300), CGPoint(x: 760.5, y: 266.5)])
        try pen.qCurveTo(points: [CGPoint(x: 738, y: 233), CGPoint(x: 701, y: 205.5)])
        try pen.qCurveTo(points: [CGPoint(x: 664, y: 178), CGPoint(x: 612, y: 160.5)])
        try pen.qCurveTo(points: [CGPoint(x: 560, y: 143), CGPoint(x: 489, y: 145)])
        try pen.qCurveTo(points: [CGPoint(x: 414, y: 145), CGPoint(x: 363, y: 164)])
        try pen.qCurveTo(points: [CGPoint(x: 312, y: 183), CGPoint(x: 280, y: 211.5)])
        try pen.qCurveTo(points: [CGPoint(x: 248, y: 240), CGPoint(x: 231.5, y: 274.5)])
        try pen.qCurveTo(points: [CGPoint(x: 215, y: 309), CGPoint(x: 208, y: 339.5)])
        try pen.qCurveTo(points: [CGPoint(x: 201, y: 370), CGPoint(x: 200.5, y: 392.5)])
        try pen.qCurveTo(points: [CGPoint(x: 200, y: 415), CGPoint(x: 200, y: 421)])
        try pen.qCurveTo(points: [CGPoint(x: 207, y: 412), CGPoint(x: 217.5, y: 399)])
        try pen.qCurveTo(points: [CGPoint(x: 228, y: 386), CGPoint(x: 254, y: 360)])
    } catch {
        print("\(error)")
    }
    pen.closePath()
}

func draw8(pen: AreaPen) {
    pen.moveTo( pt: CGPoint(x: 771, y: 367) )
    pen.lineTo( pt: CGPoint(x: 254, y: 360) )
    do {
        try pen.qCurveTo(points: [CGPoint(x: 228, y: 386), CGPoint(x: 217.5, y: 399)])
        try pen.qCurveTo(points: [CGPoint(x: 207, y: 412), CGPoint(x: 200, y: 421)])
        try pen.qCurveTo(points: [CGPoint(x: 200, y: 415), CGPoint(x: 200.5, y: 392.5)])
        try pen.qCurveTo(points: [CGPoint(x: 201, y: 370), CGPoint(x: 208, y: 339.5)])
        try pen.qCurveTo(points: [CGPoint(x: 215, y: 309), CGPoint(x: 231.5, y:274.5)])
        try pen.qCurveTo(points: [CGPoint(x: 248, y: 240), CGPoint(x: 280, y: 211.5)])
        try pen.qCurveTo(points: [CGPoint(x: 312, y: 183), CGPoint(x: 363, y: 164)])
        try pen.qCurveTo(points: [CGPoint(x: 414, y: 145), CGPoint(x: 489, y: 145)])
        try pen.qCurveTo(points: [CGPoint(x: 560, y: 143), CGPoint(x: 612, y: 160.5)])
        try pen.qCurveTo(points: [CGPoint(x: 664, y: 178), CGPoint(x: 701, y: 205.5)])
        try pen.qCurveTo(points: [CGPoint(x: 738, y: 233), CGPoint(x: 760.5,y: 266.5)])
        try pen.qCurveTo(points: [CGPoint(x: 783, y: 300), CGPoint(x: 796, y: 330.5)])
        try pen.qCurveTo(points: [CGPoint(x: 809, y: 361), CGPoint(x: 814, y: 383.5)])
        try pen.qCurveTo(points: [CGPoint(x: 819, y: 406), CGPoint(x: 819, y: 412)])
        try pen.qCurveTo(points: [CGPoint(x: 811, y: 402), CGPoint(x: 802, y: 394)])
        try pen.qCurveTo(points: [CGPoint(x: 793, y: 386), CGPoint(x: 771, y: 367)])
    } catch {
        print("\(error)")
    }
    pen.closePath()
}

func round(_ value: CGFloat, precision: CGFloat) -> CGFloat {
    let multiplier = pow(CGFloat(10), precision)
    return round(value * multiplier) / multiplier
}

final class AreaPenTests: XCTestCase {
    
    var precision: CGFloat = 6
    
    func test_rounding1() {
        XCTAssertEqual(23400, round(23400, precision: CGFloat(2)))
    }
    
    func test_rounding2() {
        XCTAssertEqual(234.68, round(234.67512, precision: CGFloat(2)))
    }

    func test_PScontour_clockwise_line_first() {
        let pen = AreaPen()
        draw1(pen: pen)
        XCTAssertEqual(-104561.35, round(pen.value, precision: precision))
    }

    func test_PScontour_counterclockwise_line_last() {
        let pen = AreaPen()
        draw2(pen: pen)
        XCTAssertEqual(104561.35, round(pen.value, precision: precision))
    }

    func test_PScontour_clockwise_line_last() {
        let pen = AreaPen()
        draw3(pen: pen)
        XCTAssertEqual(-104561.35, round(pen.value, precision: precision))
    }

    func test_PScontour_counterclockwise_line_first() {
        let pen = AreaPen()
        draw4(pen: pen)
        XCTAssertEqual(104561.35, round(pen.value, precision: precision))
    }

    func test_TTcontour_clockwise_line_first() {
        let pen = AreaPen()
        draw5(pen: pen)
        XCTAssertEqual(-104602.791667, round(pen.value, precision: precision))
    }
    
    func test_TTcontour_counterclockwise_line_last() {
        let pen = AreaPen()
        draw6(pen: pen)
        XCTAssertEqual(104602.791667, round(pen.value, precision: precision))
    }

    func test_TTcontour_clockwise_line_last() {
        let pen = AreaPen()
        draw7(pen: pen)
        XCTAssertEqual(-104602.791667, round(pen.value, precision: precision))
    }

    func test_TTcontour_counterclockwise_line_first() {
        let pen = AreaPen()
        draw8(pen: pen)
        XCTAssertEqual(104602.791667, round(pen.value, precision: precision))
    }
    
    func test_openPaths() {
        let pen = AreaPen()
        
        do {
            try pen._moveTo(pt: CGPoint(x: 0, y: 0))
            try pen._endPath()
        } catch {
            print("\(error)")
        }

        XCTAssertEqual(0, pen.value)
        
        do {
            try pen._moveTo(pt: CGPoint(x: 0, y: 0))
            try pen._lineTo(pt: CGPoint(x: 1, y: 0))
        } catch {
            print("\(error)")
        }
        assert(try pen._endPath(),
               throws: PenError.openContour)
    }

}
